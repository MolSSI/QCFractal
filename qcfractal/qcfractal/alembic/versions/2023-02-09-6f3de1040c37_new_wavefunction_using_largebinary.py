"""new wavefunction using largebinary

Revision ID: 6f3de1040c37
Revises: 1a61b3bb1ee4
Create Date: 2023-02-09 10:00:49.665770

"""
from hashlib import md5

import sqlalchemy as sa
from alembic import op
from qcelemental.models.results import WavefunctionProperties
from sqlalchemy.orm.session import Session
from sqlalchemy.sql import table, column

from qcfractal.db_socket.column_types import MsgpackExt
from qcportal.compression import compress, CompressionEnum

# revision identifiers, used by Alembic.
revision = "6f3de1040c37"
down_revision = "1a61b3bb1ee4"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "wavefunction",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("record_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["id"], ["largebinary_store.id"], ondelete="cascade"),
        sa.ForeignKeyConstraint(["record_id"], ["singlepoint_record.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("record_id", name="ux_wavefunction_record_id"),
    )

    op.execute(
        sa.text(
            """
    CREATE TRIGGER qca_wavefunction_delete_lb_tr
    AFTER DELETE ON wavefunction
    FOR EACH ROW EXECUTE PROCEDURE qca_largebinary_base_delete();
    """
        )
    )

    # Migrate wavefunction data
    old_wfn_table = table(
        "wavefunction_store",
        column("id", sa.Integer),
        column("record_id", sa.Integer),
        column("basis", MsgpackExt),
        column("restricted", sa.Boolean),
        column("h_core_a", MsgpackExt),
        column("h_core_b", MsgpackExt),
        column("h_effective_a", MsgpackExt),
        column("h_effective_b", MsgpackExt),
        column("scf_orbitals_a", MsgpackExt),
        column("scf_orbitals_b", MsgpackExt),
        column("scf_density_a", MsgpackExt),
        column("scf_density_b", MsgpackExt),
        column("scf_fock_a", MsgpackExt),
        column("scf_fock_b", MsgpackExt),
        column("scf_eigenvalues_a", MsgpackExt),
        column("scf_eigenvalues_b", MsgpackExt),
        column("scf_occupations_a", MsgpackExt),
        column("scf_occupations_b", MsgpackExt),
        column("orbitals_a", sa.String),
        column("orbitals_b", sa.String),
        column("density_a", sa.String),
        column("density_b", sa.String),
        column("fock_a", sa.String),
        column("fock_b", sa.String),
        column("eigenvalues_a", sa.String),
        column("eigenvalues_b", sa.String),
        column("occupations_a", sa.String),
        column("occupations_b", sa.String),
    )

    conn = op.get_bind()
    session = Session(conn)

    old_wfns = session.query(old_wfn_table).yield_per(200)
    for old_wfn in old_wfns:
        wfn_dict = dict(
            basis=old_wfn.basis,
            restricted=old_wfn.restricted,
            h_core_a=old_wfn.h_core_a,
            h_core_b=old_wfn.h_core_b,
            h_effective_a=old_wfn.h_effective_a,
            h_effective_b=old_wfn.h_effective_b,
            scf_orbitals_a=old_wfn.scf_orbitals_a,
            scf_orbitals_b=old_wfn.scf_orbitals_b,
            scf_density_a=old_wfn.scf_density_a,
            scf_density_b=old_wfn.scf_density_b,
            scf_fock_a=old_wfn.scf_fock_a,
            scf_fock_b=old_wfn.scf_fock_b,
            scf_eigenvalues_a=old_wfn.scf_eigenvalues_a,
            scf_eigenvalues_b=old_wfn.scf_eigenvalues_b,
            scf_occupations_a=old_wfn.scf_occupations_a,
            scf_occupations_b=old_wfn.scf_occupations_b,
            orbitals_a=old_wfn.orbitals_a,
            orbitals_b=old_wfn.orbitals_b,
            density_a=old_wfn.density_a,
            density_b=old_wfn.density_b,
            fock_a=old_wfn.fock_a,
            fock_b=old_wfn.fock_b,
            eigenvalues_a=old_wfn.eigenvalues_a,
            eigenvalues_b=old_wfn.eigenvalues_b,
            occupations_a=old_wfn.occupations_a,
            occupations_b=old_wfn.occupations_b,
        )

        # prune None values
        wfn_dict = {k: v for k, v in wfn_dict.items() if v is not None}
        wfn_prop = WavefunctionProperties(**wfn_dict)

        wfn_compressed, _, _ = compress(wfn_prop.dict(encoding="json"), CompressionEnum.zstd)

        r = conn.execute(
            sa.text(
                """INSERT INTO largebinary_store (largebinary_type, size, checksum, compression_type, data_local)
               VALUES ('wavefunction', :size, :checksum, 'zstd', :cdata)
               RETURNING id"""
            ),
            parameters={
                "size": len(wfn_compressed),
                "checksum": md5(wfn_compressed).hexdigest(),
                "cdata": wfn_compressed,
            },
        )
        lb_id = r.scalar()

        conn.execute(
            sa.text(
                """INSERT INTO wavefunction (id, record_id)
                   VALUES (:lb_id, :record_id)
                   RETURNING id"""
            ),
            parameters={"lb_id": lb_id, "record_id": old_wfn.record_id},
        )

    op.drop_table("wavefunction_store")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("wavefunction")
    # ### end Alembic commands ###
