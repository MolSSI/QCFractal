Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
records = client.query_records(created_after="2024/01/01")

# Print the first record.
print(next(records))
------------------


[31m---------------------------------------------------------------------------[39m
[31mPortalRequestError[39m                        Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[6][39m[32m, line 1[39m
[32m----> [39m[32m1[39m records = [43mclient[49m[43m.[49m[43mquery_records[49m[43m([49m[43mcreated_after[49m[43m=[49m[33;43m"[39;49m[33;43m2024/01/01[39;49m[33;43m"[39;49m[43m)[49m
[32m      3[39m [38;5;66;03m# Print the first record.[39;00m
[32m      4[39m [38;5;28mprint[39m([38;5;28mnext[39m(records))

[36mFile [39m[32m~/work/QCFractal/QCFractal/qcportal/qcportal/client.py:936[39m, in [36mPortalClient.query_records[39m[34m(self, record_id, record_type, manager_name, status, dataset_id, parent_id, child_id, created_before, created_after, modified_before, modified_after, creator_user, limit, include)[39m
[32m    918[39m filter_dict = {
[32m    919[39m     [33m"[39m[33mrecord_id[39m[33m"[39m: make_list(record_id),
[32m    920[39m     [33m"[39m[33mrecord_type[39m[33m"[39m: make_list(record_type),
[32m   (...)[39m[32m    931[39m     [33m"[39m[33mlimit[39m[33m"[39m: limit,
[32m    932[39m }
[32m    934[39m filter_data = RecordQueryFilters(**filter_dict)
[32m--> [39m[32m936[39m [38;5;28;01mreturn[39;00m [43mRecordQueryIterator[49m[43m[[49m[43mBaseRecord[49m[43m][49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mfilter_data[49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m,[49m[43m [49m[43minclude[49m[43m)[49m

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/typing.py:1289[39m, in [36m_BaseGenericAlias.__call__[39m[34m(self, *args, **kwargs)[39m
[32m   1286[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m._inst:
[32m   1287[39m     [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m([33mf[39m[33m"[39m[33mType [39m[38;5;132;01m{[39;00m[38;5;28mself[39m._name[38;5;132;01m}[39;00m[33m cannot be instantiated; [39m[33m"[39m
[32m   1288[39m                     [33mf[39m[33m"[39m[33muse [39m[38;5;132;01m{[39;00m[38;5;28mself[39m.__origin__.[34m__name__[39m[38;5;132;01m}[39;00m[33m() instead[39m[33m"[39m)
[32m-> [39m[32m1289[39m result = [38;5;28;43mself[39;49m[43m.[49m[43m__origin__[49m[43m([49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m
[32m   1290[39m [38;5;28;01mtry[39;00m:
[32m   1291[39m     result.__orig_class__ = [38;5;28mself[39m

[36mFile [39m[32m~/work/QCFractal/QCFractal/qcportal/qcportal/record_models.py:865[39m, in [36mRecordQueryIterator.__init__[39m[34m(self, client, query_filters, record_type, include)[39m
[32m    862[39m [38;5;28mself[39m.record_type = record_type
[32m    863[39m [38;5;28mself[39m.include = include
[32m--> [39m[32m865[39m [43mQueryIteratorBase[49m[43m.[49m[34;43m__init__[39;49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mclient[49m[43m,[49m[43m [49m[43mquery_filters[49m[43m,[49m[43m [49m[43mbatch_limit[49m[43m)[49m

[36mFile [39m[32m~/work/QCFractal/QCFractal/qcportal/qcportal/base_models.py:108[39m, in [36mQueryIteratorBase.__init__[39m[34m(self, client, query_filters, batch_limit)[39m
[32m    105[39m [38;5;66;03m# Total number of rows/whatever we want to fetch[39;00m
[32m    106[39m [38;5;28mself[39m._total_limit = query_filters.limit
[32m--> [39m[32m108[39m [38;5;28;43mself[39;49m[43m.[49m[43mreset[49m[43m([49m[43m)[49m

[36mFile [39m[32m~/work/QCFractal/QCFractal/qcportal/qcportal/base_models.py:118[39m, in [36mQueryIteratorBase.reset[39m[34m(self)[39m
[32m    115[39m [38;5;28mself[39m._current_batch: Optional[List[T]] = [38;5;28;01mNone[39;00m
[32m    116[39m [38;5;28mself[39m._fetched: [38;5;28mint[39m = [32m0[39m
[32m--> [39m[32m118[39m [38;5;28;43mself[39;49m[43m.[49m[43m_fetch_batch[49m[43m([49m[43m)[49m

[36mFile [39m[32m~/work/QCFractal/QCFractal/qcportal/qcportal/base_models.py:145[39m, in [36mQueryIteratorBase._fetch_batch[39m[34m(self)[39m
[32m    141[39m     new_limit = [38;5;28mself[39m._batch_limit
[32m    143[39m [38;5;28mself[39m._query_filters.limit = new_limit
[32m--> [39m[32m145[39m [38;5;28mself[39m._current_batch = [38;5;28;43mself[39;49m[43m.[49m[43m_request[49m[43m([49m[43m)[49m
[32m    146[39m [38;5;28mself[39m._fetched += [38;5;28mlen[39m([38;5;28mself[39m._current_batch)

[36mFile [39m[32m~/work/QCFractal/QCFractal/qcportal/qcportal/record_models.py:869[39m, in [36mRecordQueryIterator._request[39m[34m(self)[39m
[32m    867[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m_request[39m([38;5;28mself[39m) -> List[_Record_T]:
[32m    868[39m     [38;5;28;01mif[39;00m [38;5;28mself[39m.record_type [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m--> [39m[32m869[39m         record_ids = [38;5;28;43mself[39;49m[43m.[49m[43m_client[49m[43m.[49m[43mmake_request[49m[43m([49m
[32m    870[39m [43m            [49m[33;43m"[39;49m[33;43mpost[39;49m[33;43m"[39;49m[43m,[49m
[32m    871[39m [43m            [49m[33;43mf[39;49m[33;43m"[39;49m[33;43mapi/v1/records/query[39;49m[33;43m"[39;49m[43m,[49m
[32m    872[39m [43m            [49m[43mList[49m[43m[[49m[38;5;28;43mint[39;49m[43m][49m[43m,[49m
[32m    873[39m [43m            [49m[43mbody[49m[43m=[49m[38;5;28;43mself[39;49m[43m.[49m[43m_query_filters[49m[43m,[49m
[32m    874[39m [43m        [49m[43m)[49m
[32m    875[39m     [38;5;28;01melse[39;00m:
[32m    876[39m         [38;5;66;03m# Get the record type string. This is kind of ugly, but works.[39;00m
[32m    877[39m         record_type_str = [38;5;28mself[39m.record_type.__fields__[[33m"[39m[33mrecord_type[39m[33m"[39m].default

[36mFile [39m[32m~/work/QCFractal/QCFractal/qcportal/qcportal/client_base.py:524[39m, in [36mPortalClientBase.make_request[39m[34m(self, method, endpoint, response_model, body_model, url_params_model, body, url_params, upload_files, allow_retries, additional_headers)[39m
[32m    520[39m     file_data = [38;5;28;01mNone[39;00m
[32m    522[39m [38;5;28;01massert[39;00m (serialized_body [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m) [38;5;129;01mor[39;00m (file_data [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m)  [38;5;66;03m# Just to check my logic[39;00m
[32m--> [39m[32m524[39m r = [38;5;28;43mself[39;49m[43m.[49m[43m_request[49m[43m([49m
[32m    525[39m [43m    [49m[43mmethod[49m[43m,[49m
[32m    526[39m [43m    [49m[43mendpoint[49m[43m,[49m
[32m    527[39m [43m    [49m[43mbody[49m[43m=[49m[43mserialized_body[49m[43m,[49m
[32m    528[39m [43m    [49m[43murl_params[49m[43m=[49m[43mparsed_url_params[49m[43m,[49m
[32m    529[39m [43m    [49m[43mfile_data[49m[43m=[49m[43mfile_data[49m[43m,[49m
[32m    530[39m [43m    [49m[43mallow_retries[49m[43m=[49m[43mallow_retries[49m[43m,[49m
[32m    531[39m [43m    [49m[43madditional_headers[49m[43m=[49m[43madditional_headers[49m[43m,[49m
[32m    532[39m [43m[49m[43m)[49m
[32m    533[39m d = deserialize(r.content, r.headers[[33m"[39m[33mContent-Type[39m[33m"[39m])
[32m    535[39m [38;5;28;01mif[39;00m response_model [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:

[36mFile [39m[32m~/work/QCFractal/QCFractal/qcportal/qcportal/client_base.py:473[39m, in [36mPortalClientBase._request[39m[34m(self, method, endpoint, body, url_params, file_data, internal_retry, allow_retries, additional_headers)[39m
[32m    468[39m     [38;5;28;01mexcept[39;00m:
[32m    469[39m         [38;5;66;03m# If this error comes from, ie, the web server or something else, then[39;00m
[32m    470[39m         [38;5;66;03m# we have to use 'reason'[39;00m
[32m    471[39m         details = {[33m"[39m[33mmsg[39m[33m"[39m: r.reason}
[32m--> [39m[32m473[39m     [38;5;28;01mraise[39;00m PortalRequestError([33mf[39m[33m"[39m[33mRequest failed: [39m[38;5;132;01m{[39;00mdetails[[33m'[39m[33mmsg[39m[33m'[39m][38;5;132;01m}[39;00m[33m"[39m, r.status_code, details)
[32m    475[39m [38;5;28;01mreturn[39;00m r

[31mPortalRequestError[39m: Request failed: 400 Bad Request: Invalid body: 1 validation error for ParsingModel[RecordQueryFilters]
__root__ -> creator_user
  extra fields not permitted (type=value_error.extra) (HTTP status 400)

