Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
b3lyp_meta, b3lyp_record_ids = client.add_singlepoints([water], 
                                                       program='psi4', 
                                                       driver='energy', 
                                                       method='b3lyp', 
                                                       basis='def2-tzvp')

mp2_meta, mp2_record_ids = client.add_singlepoints([water], 
                                                   program='psi4', 
                                                   driver='energy', 
                                                   method='mp2', 
                                                   basis='def2-tzvp')
------------------


[31m---------------------------------------------------------------------------[39m
[31mPortalRequestError[39m                        Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[15][39m[32m, line 1[39m
[32m----> [39m[32m1[39m b3lyp_meta, b3lyp_record_ids = [43mclient[49m[43m.[49m[43madd_singlepoints[49m[43m([49m[43m[[49m[43mwater[49m[43m][49m[43m,[49m[43m [49m
[32m      2[39m [43m                                                       [49m[43mprogram[49m[43m=[49m[33;43m'[39;49m[33;43mpsi4[39;49m[33;43m'[39;49m[43m,[49m[43m [49m
[32m      3[39m [43m                                                       [49m[43mdriver[49m[43m=[49m[33;43m'[39;49m[33;43menergy[39;49m[33;43m'[39;49m[43m,[49m[43m [49m
[32m      4[39m [43m                                                       [49m[43mmethod[49m[43m=[49m[33;43m'[39;49m[33;43mb3lyp[39;49m[33;43m'[39;49m[43m,[49m[43m [49m
[32m      5[39m [43m                                                       [49m[43mbasis[49m[43m=[49m[33;43m'[39;49m[33;43mdef2-tzvp[39;49m[33;43m'[39;49m[43m)[49m
[32m      7[39m mp2_meta, mp2_record_ids = client.add_singlepoints([water], 
[32m      8[39m                                                    program=[33m'[39m[33mpsi4[39m[33m'[39m, 
[32m      9[39m                                                    driver=[33m'[39m[33menergy[39m[33m'[39m, 
[32m     10[39m                                                    method=[33m'[39m[33mmp2[39m[33m'[39m, 
[32m     11[39m                                                    basis=[33m'[39m[33mdef2-tzvp[39m[33m'[39m)

[36mFile [39m[32m~/work/QCFractal/QCFractal/qcportal/qcportal/client.py:1114[39m, in [36mPortalClient.add_singlepoints[39m[34m(self, molecules, program, driver, method, basis, keywords, protocols, compute_tag, compute_priority, owner_group, find_existing, **kwargs)[39m
[32m   1111[39m     body_data[[33m"[39m[33mspecification[39m[33m"[39m][[33m"[39m[33mprotocols[39m[33m"[39m] = protocols
[32m   1113[39m body = SinglepointAddBody(**body_data)
[32m-> [39m[32m1114[39m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43mmake_request[49m[43m([49m
[32m   1115[39m [43m    [49m[33;43m"[39;49m[33;43mpost[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mapi/v1/records/singlepoint/bulkCreate[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43mTuple[49m[43m[[49m[43mInsertMetadata[49m[43m,[49m[43m [49m[43mList[49m[43m[[49m[38;5;28;43mint[39;49m[43m][49m[43m][49m[43m,[49m[43m [49m[43mbody[49m[43m=[49m[43mbody[49m
[32m   1116[39m [43m[49m[43m)[49m

[36mFile [39m[32m~/work/QCFractal/QCFractal/qcportal/qcportal/client_base.py:497[39m, in [36mPortalClientBase.make_request[39m[34m(self, method, endpoint, response_model, body_model, url_params_model, body, url_params, allow_retries, additional_headers)[39m
[32m    494[39m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(parsed_url_params, pydantic.BaseModel):
[32m    495[39m     parsed_url_params = parsed_url_params.dict()
[32m--> [39m[32m497[39m r = [38;5;28;43mself[39;49m[43m.[49m[43m_request[49m[43m([49m
[32m    498[39m [43m    [49m[43mmethod[49m[43m,[49m
[32m    499[39m [43m    [49m[43mendpoint[49m[43m,[49m
[32m    500[39m [43m    [49m[43mbody[49m[43m=[49m[43mserialized_body[49m[43m,[49m
[32m    501[39m [43m    [49m[43murl_params[49m[43m=[49m[43mparsed_url_params[49m[43m,[49m
[32m    502[39m [43m    [49m[43mallow_retries[49m[43m=[49m[43mallow_retries[49m[43m,[49m
[32m    503[39m [43m    [49m[43madditional_headers[49m[43m=[49m[43madditional_headers[49m[43m,[49m
[32m    504[39m [43m[49m[43m)[49m
[32m    505[39m d = deserialize(r.content, r.headers[[33m"[39m[33mContent-Type[39m[33m"[39m])
[32m    507[39m [38;5;28;01mif[39;00m response_model [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:

[36mFile [39m[32m~/work/QCFractal/QCFractal/qcportal/qcportal/client_base.py:461[39m, in [36mPortalClientBase._request[39m[34m(self, method, endpoint, body, url_params, internal_retry, allow_retries, additional_headers)[39m
[32m    456[39m     [38;5;28;01mexcept[39;00m:
[32m    457[39m         [38;5;66;03m# If this error comes from, ie, the web server or something else, then[39;00m
[32m    458[39m         [38;5;66;03m# we have to use 'reason'[39;00m
[32m    459[39m         details = {[33m"[39m[33mmsg[39m[33m"[39m: r.reason}
[32m--> [39m[32m461[39m     [38;5;28;01mraise[39;00m PortalRequestError([33mf[39m[33m"[39m[33mRequest failed: [39m[38;5;132;01m{[39;00mdetails[[33m'[39m[33mmsg[39m[33m'[39m][38;5;132;01m}[39;00m[33m"[39m, r.status_code, details)
[32m    463[39m [38;5;28;01mreturn[39;00m r

[31mPortalRequestError[39m: Request failed: 400 Bad Request: Invalid body: 4 validation errors for ParsingModel[SinglepointAddBody]
__root__ -> tag
  field required (type=value_error.missing)
__root__ -> priority
  field required (type=value_error.missing)
__root__ -> compute_priority
  extra fields not permitted (type=value_error.extra)
__root__ -> compute_tag
  extra fields not permitted (type=value_error.extra) (HTTP status 400)

